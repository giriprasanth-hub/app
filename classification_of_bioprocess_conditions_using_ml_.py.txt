# -*- coding: utf-8 -*-
"""Classification of Bioprocess Conditions using ML .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YNidPcY4S-I19ZojH7w9M0JxgYsiqUGF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.decomposition import PCA
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load dataset
df = pd.read_csv("bioprocess_classification_data_300.csv")

df.head()

df.info()

# Summary statistics
print("\n🔹 Statistical Summary:")
print(df.describe())

# Check for missing values
print("\n🔹 Missing Values:")
print(df.isnull().sum())

# Class distribution
print("\n🔹 Class Distribution:")
print(df['Phase'].value_counts())

# Pairplot to see relationships between features
sns.pairplot(df, hue="Phase", palette="Set2")
plt.suptitle("Pairplot of Features by Phase", y=1.02)
plt.show()

# Correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(df.drop("Phase", axis=1).corr(), annot=True, cmap="coolwarm")
plt.title("Feature Correlation Heatmap")
plt.show()

!pip install streamlit

code = '''import streamlit as st
import pandas as pd
import numpy as np
import time
from sklearn.ensemble import RandomForestRegressor
import matplotlib.pyplot as plt

# Load your dataset
df = pd.read_csv("bioprocess_classification_data_300.csv")

# Train a simple model to predict Product yield
X = df[["Time", "Biomass", "Substrate"]]
y = df["Product"]

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X, y)

# Streamlit UI
st.title("🧪 Real-time Product Yield Prediction")
st.write("Adjust the bioprocess parameters and watch the product yield prediction in real-time.")

# User input sliders
time_input = st.slider("🕒 Time (hrs)", float(df['Time'].min()), float(df['Time'].max()), step=0.5)
biomass_input = st.slider("🧫 Biomass (g/L)", float(df['Biomass'].min()), float(df['Biomass'].max()), step=0.5)
substrate_input = st.slider("🧃 Substrate (g/L)", float(df['Substrate'].min()), float(df['Substrate'].max()), step=0.5)

# Predict with live update
st.subheader("🔁 Simulating Process...")

progress = st.progress(0)
status_text = st.empty()

# Simulated prediction update
yields = []
times = np.linspace(0.1, time_input, 30)
for i, t in enumerate(times):
    progress.progress(int((i+1) / len(times) * 100))
    simulated_input = np.array([[t, biomass_input, substrate_input]])
    predicted_yield = model.predict(simulated_input)[0]
    yields.append(predicted_yield)
    status_text.text(f"⏳ Time: {round(t, 2)} hr | Predicted Yield: {round(predicted_yield, 2)} g/L")
    time.sleep(0.05)

# Final plot
st.subheader("📈 Predicted Product Yield Over Time")
fig, ax = plt.subplots()
ax.plot(times, yields, marker='o', color='green')
ax.set_xlabel("Time (hr)")
ax.set_ylabel("Predicted Product Yield (g/L)")
ax.set_title("Live Yield Prediction")
st.pyplot(fig)

# Show final value
st.success(f"✅ Final Predicted Product Yield: {round(yields[-1], 2)} g/L")'''

with open('app.py', 'w') as f:
    f.write(code)

!wget -q -O - ipv4.icanhazip.com

!streamlit run app.py & npx localtunnel --port 8501

